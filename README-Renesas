
 Renesas EMMA EV2 bootloader

If you want to known more about the boot sequence for this platform, you can refer the following document:

R19UH0036EJ0600_1chip.pdf

 -> Appendix C: Boot loader in ROM 

 - - - - 

This u-boot can be compiled with different configurations, for the Renesas EMMA platforms:

 emev_emmc_config
 emev_sd_config
 emev_sd_line_config

EM/EV ROM boot code exist in 0xFFFF_0000, and it use internal SRAM 0xF000_0000. This ROM boot code will load "mini-boot" to SRAM and jump to 0xF000_0000. For SD boot mode, mini-boot is "sdboot.bin" in the SD card root directory. For eMMC boot, miniboot is the first 8K bytes in mmcblk0p1. Mini-boot will then load the remaining part:

SD boot:
Load rest of u-boot (uboot-sd.bin to DDR#0x4100_8000)
Load kernel image (uImage to DDR#0x4000_7fc0)
Load ram disk (cramfs to DDR#0x4600_0000), this is optional due to compile option

eMMC boot:
Load rest of u-boot (mmcblk0p1#0x0000_2000-0x0004_0000 to DDR#0x4100_8000)
Load kernel image (mmcblk0p2 to DDR#0x4000_7fc0)
Then jump to u-boot

Source code of mini-boot can be found inside board/emxx/emev.

File names for the SD-type boot are hardcoded in board/emxx/emev/mini-boot/mmc/mmc.c (line 668):

static const unsigned char match_name[3][8] = {
	{0x75, 0x62, 0x6F, 0x6F, 0x74, 0x2D, 0x73, 0x64},	/* uboot-sd */
	{0x75, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x20, 0x20},	/* uImage */
	{0x63, 0x72, 0x61, 0x6D, 0x66, 0x73, 0x20, 0x20},	/* cramfs */
};
static const unsigned char MATCH_NAME[3][8] = {
	{0x55, 0x42, 0x4F, 0x4F, 0x54, 0x2D, 0x53, 0x44},	/* UBOOT-SD */
	{0x55, 0x49, 0x4D, 0x41, 0x47, 0x45, 0x20, 0x20},	/* UIMAGE */
	{0x43, 0x52, 0x41, 0x4D, 0x46, 0x53, 0x20, 0x20},	/* CRAMFS */
};

There will be different boot arguments from u-boot, whose definitions can be found in include/configs/emev.h:

...
#if defined(CONFIG_EMXX_EMMCBOOT) || defined(CONFIG_EMXX_ESDBOOT)
#define CONFIG_EXT3_ROOT	"/dev/mmcblk0p3"	/* emmc-boot or esd-boot */
#elif CONFIG_EMEV_EMMC_1Piece
#define CONFIG_EXT3_ROOT	"/dev/mmcblk1p3"	/* sd-boot (emmc 1 device) */
#else
#define CONFIG_EXT3_ROOT	"/dev/mmcblk2p3"	/* sd-boot (emmc 2 device) */
#endif
#define CONFIG_DDR		"mem=167M"	/* 167MByte */
#define CONFIG_BOOTARGS		"root=/dev/null noinitrd init=/linuxrc console=ttyS0,115200n8n SELINUX_INIT=no "CONFIG_DDR" ro video=qfb: ip=none rootflags=physaddr=0x00500000"
...
#define CONFIG_CRAMFSCMD	"setenv bootargs root=/dev/null noinitrd init=/linuxrc console=ttyS0,115200n8n SELINUX_INIT=no \$(cfg_ddr) ro video=qfb: ip=none rootflags=physaddr=0x00500000\;bootm 00080000"
#ifdef CONFIG_EMXX_SDBOOT_LINE	/* SD boot linesystem */
#define CONFIG_EXT3CMD		"setenv bootargs root=/dev/null noinitrd init=/linuxrc console=ttyS0,115200n8n SELINUX_INIT=no mem=96M@0x40000000 rw video=qfb: ip=none rootflags=physaddr=0x46000000\;bootm 40007fc0"
#else
#define CONFIG_EXT3CMD		"setenv bootargs root=\$(ext3_root) noinitrd init=/linuxrc console=ttyS0,115200n8n SELINUX_INIT=no \$(cfg_ddr) rw video=qfb: ip=none rootfstype=ext3 rootwait\;bootm 40007fc0"
#endif
...
#if defined(CONFIG_EMXX_MMCBOOT)
#define CONFIG_BOOTCOMMAND	"run ext3cmd"
#else
#define CONFIG_BOOTCOMMAND	"run cramfscmd"
#endif
...

From the above definition, it can be desumed that 

 emev_emmc_config -> starts "ext3cmd" with root fs at /dev/mmcblk0p3 (the internal eMMC NAND, partition 3)
 emev_sd_config -> starts "cramfscmd" with root fs at /dev/mmcblk1p3 (the external SD-card Flash, partition 3)

 - - - -

Booting the system from SD card

*** To be tested ***

The boot from SD card normally invokes the "cramfscmd", which may points to a basic installation script used to replace the kernel uImage and main file system (Andorid) on the internal NAND partitions.

If we wish to make the system start the Android OS straight from the SD card, the following approach could be used:

1) The SD card should be partitioned and prepared in a way that is similar to the internal NAND
2) the Androidn init.rc should be corrected to mount the fs to SD partitions, in place of the NAND ones
3) the uboot-sd.bin (emev_sd_config) should start the "ext3cmd" with root fs at /dev/mmcblk1p3 (the SD card partition 3)

 - - - - 

Firmware installation script

If you mount the cramfs to your file system, out of a typical stock firmware package (which includes both a "cramfs4" file and an "install.sh" script), you can see how the firmware install script is invoked:

Code:

sudo mkdir /mnt/cramfs
sudo mount -o loop cramfs4 /mnt/cramfs
ls -l /mnt/cramfs/linuxrc
lrwxrwxrwx 1 root root 11 1970-01-01 01:00 /mnt/cramfs/linuxrc -> bin/busybox
cd /mnt/cramfs/etc/init.d/
cat rcS
...
    INSTALL_SH=`ls /tmp/sd/install.sh`
    if [ "$INSTALL_SH" = "/tmp/sd/install.sh" ]; then
        /tmp/sd/install.sh
    fi
...

Note how the boot command includes "init=/linuxrc", which points to a standard busybox executable. This will by default invoke the "::sysinit:/etc/init.d/rcS" action.

 - - - -

Examples

> export CROSS_COMPILE=arm-linux-androideabi-
> cd u-boot

1) for eMMC boot

> make distclean
> make emev_emmc_config
> make

Got these files:

...
-rwxr-xr-x    1 root root  390296 Feb  2 05:47 u-boot.srec
-rw-r--r--    1 root root  114797 Feb  2 05:47 u-boot.map
-rwxr-xr-x    1 root root  130068 Feb  2 05:47 u-boot.bin
-rwxr-xr-x    1 root root  453562 Feb  2 05:47 u-boot
-rw-r--r--    1 root root   19488 Feb  2 05:47 System.map
-rw-r--r--    1 root root  138260 Feb  2 05:47 u-boot-emmc.bin

2) for SD "line" boot (i.e. including the 'cramfs' File System)

> make distclean
> make emev_sd_line_config
> make
...

-rwxr-xr-x    1 root root  389442 Feb  2 06:08 u-boot.srec
-rw-r--r--    1 root root  129784 Feb  2 06:08 uboot-sd.bin
-rw-r--r--    1 root root  114675 Feb  2 06:08 u-boot.map
-rwxr-xr-x    1 root root  129784 Feb  2 06:08 u-boot.bin
-rwxr-xr-x    1 root root  447246 Feb  2 06:08 u-boot
-rw-r--r--    1 root root   19523 Feb  2 06:08 System.map
-rwxr-xr-x    1 root root    8312 Feb  2 06:08 sdboot.bin

3) for SD boot

> make distclean
> make emev_sd_config
> make
...

-rw-rw-r--   1 ffxx68 ffxx68  107440 2012-02-23 06:51 u-boot.map
-rwxrwxr-x   1 ffxx68 ffxx68  518590 2012-02-23 06:51 u-boot
-rwxrwxr-x   1 ffxx68 ffxx68  368258 2012-02-23 06:51 u-boot.srec
-rwxrwxr-x   1 ffxx68 ffxx68  122728 2012-02-23 06:51 u-boot.bin
-rw-rw-r--   1 ffxx68 ffxx68   19173 2012-02-23 06:51 System.map
-rw-rw-r--   1 ffxx68 ffxx68  122728 2012-02-23 06:51 uboot-sd.bin
-rwxrwxr-x   1 ffxx68 ffxx68    8192 2012-02-23 06:51 sdboot.bin
