
 Renesas EMMA EV2 bootloader

If you want to known more about the boot sequence for this platform, you can refer the following document:

R19UH0036EJ0600_1chip.pdf

 -> Appendix C: Boot loader in ROM 

 - - - - 

This u-boot can be compiled with different configurations, for the Renesas EMMA platforms. E.g.

 emev_emmc_config
 emev_sd_config
 ...

EM/EV ROM boot code exist in 0xFFFF_0000, and it use internal SRAM 0xF000_0000. This ROM boot code will load "mini-boot" to SRAM and jump to 0xF000_0000. For SD boot mode, mini-boot is "sdboot.bin" in the SD card root directory. For eMMC boot, miniboot is the first 8K bytes in mmcblk0p1. Mini-boot will then load the remaining part:

For an SD boot:
Load rest of u-boot (uboot-sd.bin to DDR#0x4100_8000)
Load kernel image (uImage to DDR#0x4000_7fc0)
Load ram disk (cramfs to DDR#0x4600_0000), this is optional due to compile option

For an eMMC boot:
Load rest of u-boot (mmcblk0p1#0x0000_2000-0x0004_0000 to DDR#0x4100_8000)
Load kernel image (mmcblk0p2 to DDR#0x4000_7fc0)
Then jump to u-boot

Source code of mini-boot can be found inside board/emxx/emev.

File names for the SD-type boot are hardcoded in board/emxx/emev/mini-boot/mmc/mmc.c (line 668):

static const unsigned char match_name[3][8] = {
	{0x75, 0x62, 0x6F, 0x6F, 0x74, 0x2D, 0x73, 0x64},	/* uboot-sd */
	{0x75, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x20, 0x20},	/* uImage */
	{0x63, 0x72, 0x61, 0x6D, 0x66, 0x73, 0x20, 0x20},	/* cramfs */
};
static const unsigned char MATCH_NAME[3][8] = {
	{0x55, 0x42, 0x4F, 0x4F, 0x54, 0x2D, 0x53, 0x44},	/* UBOOT-SD */
	{0x55, 0x49, 0x4D, 0x41, 0x47, 0x45, 0x20, 0x20},	/* UIMAGE */
	{0x43, 0x52, 0x41, 0x4D, 0x46, 0x53, 0x20, 0x20},	/* CRAMFS */
};

There will be different boot arguments from u-boot, whose definitions can be found in include/configs/emev.h. E.g

...
#if defined(CONFIG_EMXX_EMMCBOOT) || defined(CONFIG_EMXX_ESDBOOT) 
#define CONFIG_EXT3_ROOT	"/dev/mmcblk0p3"	/* emmc-boot or esd-boot */
#elif defined(CONFIG_EMXX_SDTEST)
#define CONFIG_EXT3_ROOT	"/dev/mmcblk1p3"        /* test-sd boot */
#elif CONFIG_EMEV_EMMC_1Piece
#define CONFIG_EXT3_ROOT	"/dev/mmcblk1p3"	/* sd-boot (emmc 1 device) */
#else
#define CONFIG_EXT3_ROOT	"/dev/mmcblk2p3"	/* sd-boot (emmc 2 device) */
#endif
...
#if defined(CONFIG_EMXX_MMCBOOT) || defined(CONFIG_EMXX_SDTEST)
#define CONFIG_BOOTCOMMAND	"run ext3cmd"
#else
#define CONFIG_BOOTCOMMAND	"run cramfscmd"
#endif
...

Hence, for different build configurations:

 emev_emmc_config -> starts "ext3cmd" with root fs set to /dev/mmcblk0p3 (the internal eMMC NAND, partition 3)
 emev_sd_config -> starts "cramfscmd" with root fs set to /dev/mmcblk1p3 (the external SD-card Flash, partition 3)
 emev_sdtest_config -> starts "ext3cmd" with root fs set to /dev/mmcblk1p3 (the external SD-card Flash, partition 3)


 - - - -

Using a "bootable" SD card

Booting from SD card is normally meant for firmware updates. This invokes the "cramfscmd", which points to a basic installation script used to replace the kernel uImage and main file system (i.e. Android) on the internal NAND partitions (as explained in next section below).

We could also make the system start the Android on the SD card itself, by properly partitioning and preparing it to be bootable, for faster test cycles during development stages.

The following approach could be used:

1) the SD card should be partitioned and prepared in a way that is similar to the internal NAND
2) the Android init.rc should be corrected to mount the fs to SD card partitions, in place of the NAND ones
3) the uboot-sd.bin should boot with "run ext3cmd" with root fs at "/dev/mmcblk1p3" (the SD card, partition 3)

The complete script to prepare the SD card is found at:

 https://github.com/Renesas-EMEV2/Renesas-BootSD

The following configuration takes care of building the bootloader as per point 3 above:

 emev_sdtest_config

 - - - - -

Build Examples

 export CROSS_COMPILE=arm-linux-eabi-  (or whatever build toolchain used)
 cd u-boot

1) for eMMC boot

 make distclean
 make emev_emmc_config
 make
...
 ls -lrt
...
-rw-r--r--   1 ffxx68 ffxx68  131172 2012-09-21 08:39 u-boot-emmc.bin

2) for simple SD boot 
 
 make distclean
 make emev_sd_config
 make
...
 ls -lrt
...
-rw-r--r--   1 ffxx68 ffxx68  122712 2012-09-21 08:41 uboot-sd.bin
-rwxr-xr-x   1 ffxx68 ffxx68    8477 2012-09-21 08:41 sdboot.bin

3) for SD "line system", including the 'cramfs' File System, e.g. for firmware updates

 make distclean
 make emev_sd_line_config
Add EMEV SD BOOT Option
Add LINE SYSTEM Option
 make
...
 ls -lrt
...
-rw-r--r--   1 ffxx68 ffxx68  122728 2012-09-21 08:46 uboot-sd.bin
-rwxr-xr-x   1 ffxx68 ffxx68    8768 2012-09-21 08:46 sdboot.bin


4) for a test, bootable SD-card

 make distclean
 make emev_sdtest_config
Add EMEV test-SD BOOT Option
 make
...
 ls -lrt
...
-rw-r--r--   1 ffxx68 ffxx68  122712 2012-09-21 08:36 uboot-sd.bin
-rwxr-xr-x   1 ffxx68 ffxx68    8544 2012-09-21 08:36 sdboot.bin

 - - - - -

Firmware "flashing" on final device

Mounting for example to a host Linux file system the cramfs out of a typical stock firmware package (which includes both a "cramfs4" file and an "install.sh" script), you can find how the firmware install script is invoked:

E.g.

sudo mkdir /mnt/cramfs
sudo mount -o loop cramfs /mnt/cramfs
ls -l /mnt/cramfs/linuxrc
lrwxrwxrwx 1 root root 11 1970-01-01 01:00 /mnt/cramfs/linuxrc -> bin/busybox
cd /mnt/cramfs/etc/init.d
cat rcS
...
    INSTALL_SH=`ls /tmp/sd/install.sh`
    if [ "$INSTALL_SH" = "/tmp/sd/install.sh" ]; then
        /tmp/sd/install.sh
    fi
...

Note how the boot command includes "init=/linuxrc", which points to a standard busybox executable. This will by default invoke the "::sysinit:/etc/init.d/rcS" action.

An example script to prepare an SD card for firmware update is given:

 fwupd.sh

which will generate all bootlaoder binaries and move files to destination, which could also be a FAT-32 or FAT-16 SD card root dir.

NOTE - android fs (file name "android-fs4.tar.gz") name and kernel uImage (renamed to "uImage4") are not included and should be loaded on SD separately.

